<%= javascript_include_tag 'DataTables-1.8.2/jquery.js', 'DataTables-1.8.2/jquery.dataTables.js', 'DataTables-1.8.2/jquery.dataTables.rowGrouping.js', 'DataTables-1.8.2/Scroller.js' %>
  <%= stylesheet_link_tag  'data_tables.css' %>
<script type="text/javascript">
    jQuery.noConflict();
    var $j = jQuery;
</script>
<%= javascript_include_tag 'calendar_date_select/calendar_date_select' %>
<%= javascript_include_tag 'strain.js', 'biosample.js' %>
<%= stylesheet_link_tag 'calendar_date_select/default', "styles" %>
<%= javascript_include_tag "sharing.js" -%>
<%= javascript_include_tag "resource.js"%>
<%= javascript_include_tag "fancy_multiselect.js"%>

<%
   select_truncate_length=120
   all_organisms = Organism.find(:all, :order=>:title)
   default_selected_organisms =  try_block{current_user.person.projects.first.organism_ids}.blank? ? [0] : try_block{current_user.person.projects.first.organism_ids}
-%>

<h4 style="margin-left: 10em;margin-top:1em;margin-bottom: -1.5em;font-style:italic;color:gray;">From Organism to Sample: browsing available and creation new entries</h4>
<br/>
<div class='yui-g'>
  <div class='yui-u first' style="width: 48%;margin-left: 0.5em;margin-top: 1em">
  <h2>Organism</h2>
  <%= select_tag "strain[organism_ids]",
                 options_for_select([["Select Organisms ...", 0]]|all_organisms.collect { |o| [truncate(h(o.title), :length=>select_truncate_length), o.id] }, :selected => default_selected_organisms),
                 {:onchange=>remote_function(:url=>{:action=>"existing_strains", :controller=>"biosamples"},
                                             :with=>"'organism_ids='+$F('strain_organism_ids')",
                                             :before=>"show_ajax_loader('existing_strains')")+ ";check_show_existing_strains('strain_organism_ids', 'existing_strains', '');hide_existing_specimens();
                                             hide_existing_samples();return(false);",
                 :multiple => true} -%>

  </div>
  <div class='yui-u' id="existing_strains" style="width: 48%;margin-right: 0.5em"></div>
</div>
<div class="yui-g">
  <div class="yui-u first" id="existing_specimens" style="width: 48%;margin-left: 0.5em"></div>
  <div class="yui-u" id="existing_samples" style="width: 48%;margin-right: 0.5em"></div>
</div>

<script type="text/javascript">
    var organism = new Array();
    check_show_existing_strains('strain_organism_ids', 'existing_strains', '<%=url_for(:controller => 'biosamples', :action => 'existing_strains')-%>');

    function loadNewStrainAfterCreation(strain, organism) {
        var data = strain_table.fnGetData();
        var load = false;
        for (var i=0;i<data.length; i++){
            var pattern = new RegExp(organism);
            if (pattern.test(data[i][0]))
                load = true;
        }

        if (load) {
            var a = strain_table.fnAddData(strain);
            var nTr = strain_table.fnSettings().aoData[a[0]].nTr;
            $j(nTr).addClass('gradeA');
        }
    }

    function loadNewSpecimenAfterCreation(specimen, strain_id) {
        var data = specimen_table.fnGetData();
        var load = false;
        for (var i=0;i<data.length; i++){
            var pattern = new RegExp('ID='+ new Number(strain_id).toString());
            if (pattern.test(data[i][0]))
                load = true;
        }

        if (load) {
            specimen_table.fnAddData(specimen);
        }
    }

    function loadNewSampleAfterCreation(sample) {
        var a = sample_table.fnAddData(sample);
        var sample_nTr = sample_table.fnSettings().aoData[a[0]].nTr;
        $j(sample_nTr).addClass('gradeX');
    }

    function strains_of_selected_organism(organism_id){
        var option;
        var selection_box = $('specimen_strain_id');
        selection_box.options.length=0;
        option = document.createElement("OPTION");
        option.text = 'Select Strain ...';
        option.value = 0;
        try {
          selection_box.add(option); //for older IE version
        }
        catch (ex) {
          selection_box.add(option, null);
        }

        <% Organism.find(:all).each do |organism|%>
        if ('<%= organism.id -%>' == organism_id){
                <% (organism.strains.sort_by(&:title).reject{|s| s.is_dummy?}).each do |strain| -%>

                    if ('<%= strain.organism_id -%>' == organism_id){
                        option = document.createElement("OPTION");
                        option.text = '<%= escape_javascript(strain.info) -%>';
                        option.value = '<%= strain.id -%>';
                        try {
                          selection_box.add(option); //for older IE version
                        }
                        catch (ex) {
                          selection_box.add(option, null);
                        }
                    }
                 <% end %>

        }
        <% end %>
    }

    function updateCreatorSettings() {
    // iterate through all creators and build the "shared with" list;
    // in the meanwhile also assemble a minimized version of the array that
    // could be posted with the form (this won't have item titles in it)

    var creators = '';
    var creators_arr = new Array();

    for(var i = 0; i < creator_settings.length; i++) {
        creator_name = creator_settings[i][0];
        creator_email = creator_settings[i][1];
        creator_id = creator_settings[i][2];
        creator_email_text = "";
        if (<%= hide_contact_details? -%> == "true") {
          creator_email_text = ': ' + creator_email
        }
        creators += '<b>' + creator_name + '</b>' + creator_email_text
        + '&nbsp;&nbsp;&nbsp;<small style="vertical-align: middle;">'
        + '[<a href="" onclick="javascript:deleteCreator(\''+ creator_name +'\', '+ creator_id +'); return(false);">remove</a>]</small><br/>';

        creators_arr.push([creator_name, creator_id]);
    }


    // remove the last line break
    if(creators.length > 0) {
        creators = creators.slice(0,-5);
    }


    // update the page
    if(creators.length == 0) {
        $('creators_list').innerHTML = '<span class="none_text">No creators</span>';
    }
    else {
        $('creators_list').innerHTML = creators;
    }


    // UPDATE THE FIELDS WHICH WILL BE SUBMITTED WITH THE PAGE
    $('creators').value = Object.toJSON(creators_arr);
}


function checkCreatorNotInList(creator_name, creator_id) {
    rtn = true;

    for(var i = 0; i < creator_settings.length; i++)
        if(creator_settings[i][0] == creator_name && creator_settings[i][2] == creator_id) {
            rtn = false;
            break;
        }

    return(rtn);
}


// adds an creator to the list and updates the displayed list
function addCreator(creator_name, creator_email, creator_id) {
    if(checkCreatorNotInList(creator_name, creator_id)) {
        creator_settings.push([creator_name, creator_email, creator_id]);

        // update visible page
        updateCreatorSettings();
    }
    else {
       // alert('The following entity was not added (already in the list of creators):\n\n' +
       //     creator_name + ': ' + creator_email);
    }
}


// removes creator from creator list and updates the displayed list
function deleteCreator(creator_name, creator_id) {
    // remove the actual record for the creator
    for(var i = 0; i < creator_settings.length; i++)
        if(creator_settings[i][0] == creator_name && creator_settings[i][2] == creator_id) {
            creator_settings.splice(i, 1);
            break;
        }

    // update the page
    updateCreatorSettings();
}


function addCreators() {
    var selIDs = autocompleters[creator_autocompleter_id].getRecognizedSelectedIDs();

    if(selIDs == "") {
        // no creators to add
        alert("Please choose some creators!");
        return(false);
    }
    else {
        // some creators to add - known that don't have duplicates
        // within the new list, but some entries in the new list
        // may replicate those in the main creator list: this
        // will be checked by addCreator()

        for(var i = 0; i < selIDs.length; i++) {
            id = parseInt(selIDs[i]);
            email = autocompleters[creator_autocompleter_id].getValueFromJsonArray(autocompleters[creator_autocompleter_id].itemIDsToJsonArrayIDs([id])[0], 'email');
            name = autocompleters[creator_autocompleter_id].getValueFromJsonArray(autocompleters[creator_autocompleter_id].itemIDsToJsonArrayIDs([id])[0], 'name');
            addCreator(name, email, id);
        }

        // remove all tokens from autocomplete text box
        autocompleters[creator_autocompleter_id].deleteAllTokens();

        return(true);
    }
}

    function updateInstitutionList(data, project_name){
        data = data.evalJSON(true);
        element = $('adv_creator_select_institutions');
        spinner = $('adv_creator_select_project_spinner');
        element.options.length = "";
        element.options[0] = new Option('All members of ' + project_name, 0);
        var next_index_to_use = 1;
        for (var i = 0; i < data.institution_list.length; i++) {
            element.options[next_index_to_use] = new Option('Members of ' + project_name + ' @ ' + data.institution_list[i][0], data.institution_list[i][1]);
            next_index_to_use++;
        }
        spinner.hide();
        element.show();
        $('adv_creator_select_add').style.display = 'inline-block';
    }

    function addPeopleToList(data){
        data = data.evalJSON(true);
        for (var i = 0; i < data.people_list.length; i++) {
            addCreator(data.people_list[i][0], data.people_list[i][1], data.people_list[i][2])
        }
        $('adv_creator_select_spinner').hide();
    }

</script>
