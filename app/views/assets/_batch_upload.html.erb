<%= javascript_include_tag 'batch_upload', 'models', 'parseuri' %>
<%= stylesheet_link_tag 'batch_upload' %>

<%
   # determine the asset type from the controller
   upload_field = controller_name.downcase.singularize.underscore
   # inject the attributes data_url and local_copy in the asset type, e.g. @model. This keeps the form clean.
   resource=eval("@"+upload_field)
   class << resource
       attr_accessor :data_url, :local_copy
   end unless resource.nil?
   resource.local_copy=0 unless resource.nil?
   asset_name = text_for_resource upload_field
   @content_blob ||= ContentBlob.new
   with_image_file = resource && resource.kind_of?(Model) && (mine?(resource) || resource.can_edit?)
   original_filename=nil
-%>

<%
   if params[upload_field.to_sym]
     resource.data_url=params[upload_field.to_sym][:data_url] if params[upload_field.to_sym][:data_url]
     original_filename = params[upload_field.to_sym][:original_filename] if params[upload_field.to_sym][:original_filename]
   end
-%>

<div class="box_infotext">
  <p>
    You can register a <%= asset_name -%> by either directly uploading files, or registering URLs to either another page or remote file. Please test each URL before submitting.
    You can register multiple items for this <%= asset_name -%>.
    <%= link_to_function "More info "+image("expand"), :id => 'more_info_expand_image' do |page|
      page.visual_effect(:toggle_appear, "more_upload_info", :duration => 0.3)
      page["more_info_expand_image"].toggle
      page["more_info_collapse_image"].toggle
    end
    -%>
    <%= link_to_function "More info "+image("collapse"), :id => 'more_info_collapse_image', :style => "display:none" do |page|
      page.visual_effect(:toggle_appear, "more_upload_info", :duration => 0.3)
      page["more_info_expand_image"].toggle
      page["more_info_collapse_image"].toggle
    end
    -%>
  </p>
    <span id="more_upload_info" style="display:none;">
        <p>
          If the URL points to another webpage - for example a collection of datasets in another repostiory - then the link will be shown for this asset, and there will be no download option.
        </p>
        <p>
          If the URL points to a remote file, then it will appear just like an uploaded asset in SEEK. If accessing the file requires authorization, then SEEK has no option but to store only the URL. In this case, when another user selects to download the <%= asset_name -%>
          then they will simply directed to the URL (for example, so that they can login to access the file).
        </p>
        <p>
          When registering a URL to a file, you can specify that a copy of the data should be stored
          within SEEK. This is recommended and is equivalent to uploading a file. It also means that should the data behind the URL become unavailable, the data is still available from SEEK. However, you should
          be sure that the copyright on the file allows you to do this.
        </p>
        <p></p>
    </span>
  <% if new_version -%>
      <p>
        You are about to upload a new version of this <%= asset_name -%>. You should only upload a new version if you have made minor modifications, such as tidying up or fixing errors, that do not change the original purpose
        of the file. If you think this new version changes the original purpose or meaning of the <%= asset_name -%>, then you should <span style="text-decoration: underline"><%= link_to "upload it as a new item",polymorphic_path(resource,:action=>:new) -%></span>
        rather than create a new version.
      </p>
  <% end -%>
</div>

<div class="yui-g">
  <div class="yui-u first">

  <div id="upload_type_selection">
    <ul id="switch_upload_buttons">
      <li>
        <%= link_to_function image("file_large"), "from_file_selected(); return (false);", :class=>"block_link_active", :id=>"upload_from_file_button", :title=>tooltip_title_attrib('Add from a local file') -%>
      </li>
      <li>
        <%= link_to_function image("internet_large"), "from_url_selected(); return (false);", :class=>"block_link", :id=>"upload_from_url_button", :title=>tooltip_title_attrib('Add from a remote URL') -%>
      </li>
      <li id="upload_options">
        <div id="upload_from_file">
          <p>
            <b>File to upload:</b>
            <br/>
                <% fields_for @content_blob do |content_blob| -%>
                    <input id="content_blob_data" type="file">
                <% end %>
          </p>

        </div>
        <div id="upload_from_url" style="display:none;">
          <p>
            <b>URL:</b>
            <span class="required">*</span>


            <%= text_field_tag "content_blob[data_url]", resource.data_url, :size => 35 %>
                <span style="display:inline-block;">
                    <%= link_to_function (image("new") + "Add"), "addToList()" %>
                    <%= link_to_remote image("test", :title=>"Test", :alt=>"Test")+" Test",
                                       {:url=>{:action=>:test_asset_url, :symb=>"content_blob"},
                                       :method=>:post,
                                       :type => :synchronous,
                                       :with=>"multi_selector.current_url_element.serialize()",
                                       :before=>"$('test_url_msg').innerHTML='';show_ajax_loader('test_url_result_icon');"},
                                        {:id => 'test'}-%>
                </span>

                <p style="clear:both;">
                  <b>Make a copy?</b>
                  <%= check_box upload_field, :local_copy, :id=>"local_copy" -%>
                </p>
            <%= hidden_field_tag "content_blob[original_filename_0]", original_filename -%>
            </p>
            <p>
              <span id="test_url_result_icon"></span>
              <span id="test_url_msg" style="display:none;"></span>
            </p>
          </div>
      </li>
    </ul>
  </div>

  <p id='text_for_new_version' style="display:none; margin-bottom:0.5em;"> Here are the files/urls from previous version, you can remove them or add new files/urls: </p>

  <table id="pending_files">

  </table>
</div>


<% if with_image_file -%>
      <div class="yui-u" id="image_file_box">
    <% resource_name = resource.class.name.underscore %>
    <%= hidden_field_tag("#{resource_name}_id", resource.id) -%>
      <p>
        <b>Image file: </b>
        <br/>
        <%= file_field "#{resource_name}_image", :image_file, :onchange => "detectFileFormat('#{resource_name}_image_image_file')" %>
      </p>
      <% if new_version && previous_version_image_file = resource.latest_version.model_image.try(:original_filename) -%>
          <p>
            The image file of previous version <span style="font-weight: bold;"><%= previous_version_image_file %> </span> will be used if you dont specify model image file
            <%= hidden_field_tag 'previous_version_image', previous_version_image_file %>
          </p>
      <% end -%>
      </div>
<% end -%>

</div>

<script type="text/javascript">
    var multi_selector = new MultiSelector($('pending_files'));

         multi_selector.addElement($('content_blob_data'));
         multi_selector.addElement($('content_blob_data_url'));

    <% if resource.data_url.blank? -%>
        from_file_selected();
    <% else -%>
        from_url_selected();
        clickLink($('test'));
        var ur_result_icon = $('test_url_result_icon');
        if (ur_result_icon.children[0].src.match('exclamation.png') == null){
            addToList();
        }
    <% end -%>

    <% if new_version %>
        $('text_for_new_version').style['display'] = 'block';
        listFilesOfPreviousVersion();
    <% end %>

    function addToList() {
        var url = multi_selector.current_original_filename_url_element.value || multi_selector.current_url_element.value;
        var error=false;
        var parsed = parseUri(url);

        if (!parsed.protocol || !parsed.host || parsed.host=="null") {
            error=true;
        }
        else {
            var new_element = document.createElement('input');
            new_element.type = 'text';
            var old_element = document.getElementsByName('content_blob[url_' + (multi_selector.id_url - 1) + ']')[0];
            new_element.size = old_element.size
            var original_filename_element = document.createElement('input');
            original_filename_element.type = 'hidden';
            original_filename_element.name = 'content_blob[original_filename_' + (multi_selector.id_url) + ']';

            $('upload_from_url').appendChild(original_filename_element);
            if (old_element.value != "") {
                old_element.parentNode.insertBefore(new_element, old_element);
                old_element.multi_selector.addElement(new_element);
                old_element.multi_selector.addListRow(old_element);
                old_element.type = 'hidden';
            } else {
                old_element.focus();
            }

        }

        if (error) {
            alert("In invalid URL was provided");
        }
    }

    function listFilesOfPreviousVersion(){
        <% content_blobs = resource.latest_version.try(:content_blobs) %>
        <% unless content_blobs.blank? %>
            <% content_blobs.each do |cb| %>
                var element = document.createElement('input');
                element.name = "content_blobs[id][<%= cb.id%>]";
                element.value = "<%= cb.url || cb.original_filename %>";
                element.type = 'hidden';
                var current_element = multi_selector.current_element;
                current_element.parentNode.insertBefore(element, current_element);
                multi_selector.addListRow(element);
            <% end %>
        <% end %>
    }
</script>